{
  "name": "Cloud Load Balancing",
  "entries": {
    "2025-10-31": [
      {
        "kind": "Changed",
        "content": "The global and classic external Application Load Balancers implemented on\nGoogle Front-Ends (GFEs) now reject TLS connections when the client and the load\nbalancer support ALPN (Application-Layer Protocol Negotiation), but don't share\ncommon ALPN protocols.\n\nPreviously, if a client proposed a list of application protocols during the TLS\nhandshake using the ALPN extension and none were supported by the load balancer,\nALPN would be deactivated and the connection would default to using HTTP/1 as\nthe default application protocol. After this update, the GFE instead returns\nan `SSL_TLSEXT_ERR_ALERT_FATAL` response which causes the load balancer to\nterminate the TLS handshake, and the connection to close. This change ensures\nthat an application-layer protocol is always explicitly negotiated between the\nclients and the load balancers that support ALPN.",
        "summary": {
          "title": "TLS connection rejection for unsupported ALPN protocols",
          "summary": "Global and classic external Application Load Balancers now reject TLS connections if the client and load balancer support ALPN but do not share any common protocols. Previously, these connections would default to HTTP/1. This change ensures explicit negotiation of application-layer protocols."
        }
      }
    ],
    "2025-10-29": [
      {
        "kind": "Feature",
        "content": "You can specify a custom ephemeral `/96` IPv6 address range when creating a\nregional IPv6 forwarding rule. For more information, see the following:\n\n* [Internal passthrough Network Load Balancer overview](https://docs.cloud.google.com/load-balancing/docs/internal)\n* [Backend service-based external passthrough Network Load Balancer overview](https://docs.cloud.google.com/load-balancing/docs/network/networklb-backend-service)\n* [Protocol forwarding overview](https://docs.cloud.google.com/load-balancing/docs/protocol-forwarding)\n\nThis feature is in **General availability**.",
        "summary": {
          "title": "Custom ephemeral IPv6 address range for forwarding rules",
          "summary": "You can now specify a custom ephemeral /96 IPv6 address range when creating a regional IPv6 forwarding rule. This feature is in General Availability."
        }
      }
    ],
    "2025-10-28": [
      {
        "kind": "Feature",
        "content": "Application Load Balancers support authorization policies that let you\nestablish access control checks for incoming traffic.\n\nFor details, see\n[Authorization policy overview](https://docs.cloud.google.com/load-balancing/docs/auth-policy/auth-policy-overview).\n\nThis feature is in **General availability**.",
        "summary": {
          "title": "Application Load Balancers Now Support Authorization Policies",
          "summary": "Enhance your security with new authorization policies for Application Load Balancers. This feature allows you to control access by setting up checks for incoming traffic, ensuring only authorized requests reach your applications. It is now available for general use."
        }
      },
      {
        "kind": "Feature",
        "content": "Both internal passthrough Network Load Balancers and external passthrough Network Load Balancers support load balancing to managed\ninstance groups (MIGs) comprised of IPv6-only VM instances.\n\nFor more details, see the following pages:\n\n* [Set up an external passthrough Network Load Balancer with a backend service](https://docs.cloud.google.com/load-balancing/docs/network/setting-up-network-backend-service)\n* [Set up an internal passthrough Network Load Balancer with VM instance group backends](https://docs.cloud.google.com/load-balancing/docs/internal/setting-up-internal)\n\nThis feature is in **General availability**.",
        "summary": {
          "title": "IPv6-only MIGs now supported for passthrough Network Load Balancers",
          "summary": "Passthrough Network Load Balancers now support load balancing to managed instance groups (MIGs) that consist of IPv6-only VM instances. This applies to both internal and external passthrough Network Load Balancers. This feature is now in General Availability."
        }
      }
    ],
    "2025-10-06": [
      {
        "kind": "Feature",
        "content": "Percentage-based request mirroring is now supported for the global and regional external Application Load Balancers (classic is not supported). By default, the mirrored backend service receives all requests, even if the original traffic is being split between multiple weighted backend services. You\ncan now configure the mirrored backend service to receive only a percentage of the\nrequests by using the `mirrorPercent` flag to specify the percentage of\nrequests to be mirrored, expressed as a value between 0 and 100.0.\n\nFor an example, see [Set up traffic management for regional external Application Load Balancers](https://docs.cloud.google.com/load-balancing/docs/https/setting-up-reg-traffic-mgmt#mirror_traffic).\n\nThis feature is available in **General availability**.",
        "summary": {
          "title": "New Feature: Percentage-based Request Mirroring for External Application Load Balancers",
          "summary": "You can now configure percentage-based request mirroring for global and regional external Application Load Balancers. Use the `mirrorPercent` flag to specify the percentage of requests to be mirrored, allowing for more granular traffic control."
        }
      }
    ],
    "2025-09-17": [
      {
        "kind": "Security",
        "content": "A security fix was made which changes the behavior of requests and responses sent with the `Transfer-Encoding: Chunked` header to be more RFC 9112 compliant. The [RFC states](https://datatracker.ietf.org/doc/html/rfc9112#name-chunked-transfer-coding) that both the `chunked_body` and the `last-chunk` fields must end in `CRLF`. This is now enforced.",
        "summary": {
          "title": "Security fix for Chunked Transfer Encoding",
          "summary": "A security fix has been implemented to enhance compliance with RFC 9112 for requests and responses using the `Transfer-Encoding: Chunked` header. This update ensures that both `chunked_body` and `last-chunk` fields correctly terminate with CRLF as mandated by the RFC."
        }
      }
    ],
    "2025-09-12": [
      {
        "kind": "Changed",
        "content": "The global and classic external Application Load Balancers implemented on Google Front-Ends (GFEs) now support HTTP/1.0 explicitly as a protocol during ALPN (Application-Layer Protocol Negotiation) negotiation.\n\nPreviously, when the GFEs didn't support HTTP/1.0 explicitly, the GFE would return an `SSL_TLSEXT_ERR_NOACK` response, disable ALPN, and fall back to using HTTP/1 (which includes HTTP/1.0 and HTTP/1.1) as the default application protocol. After this change, GFEs will instead return `HTTP/1.0`, which provides clients with positive confirmation that their advertised `HTTP/1.0` was accepted.\n\nYou are not expected to make any changes with this update. If a TLS handshake with HTTP/1.0 is unsuccessful, please contact [support](https://cloud.google.com/load-balancing/docs/getting-support).",
        "summary": {
          "title": "HTTP/1.0 Support Added to Load Balancers",
          "summary": "Global and classic external Application Load Balancers now explicitly support HTTP/1.0 during ALPN negotiation. Previously, unsupported protocols would cause a fallback to HTTP/1. No changes are expected with this update."
        }
      }
    ],
    "2025-08-26": [
      {
        "kind": "Feature",
        "content": "The internal and external passthrough Network Load Balancers now support load balancing to unmanaged instance groups comprised of IPv6-only VM instances.\n\nProtocol forwarding also supports IPv6-only target instances.\n\nFor more details, see the following pages:\n\n* [Protocol forwarding overview](https://cloud.google.com/load-balancing/docs/protocol-forwarding)\n* [Backend service-based external passthrough Network Load Balancer overview](https://cloud.google.com/load-balancing/docs/network/networklb-backend-service)\n* [Internal passthrough Network Load Balancer overview](https://cloud.google.com/load-balancing/docs/internal)\n* [Set up an internal passthrough Network Load Balancer with IPv6-only subnets and backends](https://cloud.google.com/load-balancing/docs/internal/setting-up-internal#configure-ipv6-only)\n\nThis feature is available in **General Availability**.",
        "summary": {
          "title": "IPv6-only load balancing support",
          "summary": "Internal and external passthrough Network Load Balancers now support load balancing to unmanaged instance groups comprised of IPv6-only VM instances. Protocol forwarding also supports IPv6-only target instances."
        }
      }
    ],
    "2025-08-05": [
      {
        "kind": "Feature",
        "content": "Cross-region internal Application Load Balancers can now route requests for static content to Cloud Storage buckets.\n\nFor more information, see [Set up a cross-region internal Application Load Balancer with Cloud Storage buckets](https://cloud.google.com/load-balancing/docs/l7-internal/setup-cross-region-internal-https-buckets).\n\nThis capability is now in **General Availability**.",
        "summary": {
          "title": "Feature Announcement: Load Balancer With Cloud Storage Integration",
          "summary": "New feature allows cross-region internal Application Load Balancers to route requests for static content to Cloud Storage buckets."
        }
      }
    ],
    "2025-07-30": [
      {
        "kind": "Changed",
        "content": "**Starting October 15, 2025, the global and classic external Application Load Balancers are improving HTTP header handling for headers with obs-fold values to comply with the [RFC 9112](https://www.rfc-editor.org/rfc/rfc9112.html#section-5.2) standard**\n\nPreviously, these load balancers would forward HTTP headers with obs-fold values (those split across multiple lines, with subsequent lines starting with a space or a tab) without any changes. Starting October 15, 2025, each obs-fold will be replaced with one or more space characters (SP octets) before forwarding the message upstream. This ensures that the header is correctly interpreted as a single line, as required by the HTTP specification.\n\n**What you need to do**\n\nReview your current client applications and backend services before October 15, 2025 and ensure that they generate HTTP headers with obs-fold values in a single-line format when communicating with these load balancers.\n\nBecause the obs-fold header fields have been deprecated in RFC 9112, compliant clients and servers should already avoid using this format. However, there is a possibility that services that specifically rely on the old, non-compliant multi-line format of headers with obs-fold values might experience unexpected behavior. You should proactively check your backend service logs for any errors originating from your services due to the modified obs-fold headers.\n\nFor more information on the HTTP specification regarding headers with obs-fold values, review [RFC 9112, Section 5.2: Obsolete Line Folding](https://www.rfc-editor.org/rfc/rfc9112.html#section-5.2).",
        "summary": {
          "title": "HTTP Header Handling Update",
          "summary": "Starting October 15, 2025, Application Load Balancers will improve HTTP header handling for obs-fold values to comply with RFC 9112 standard. This change ensures correct interpretation of headers as a single line."
        }
      }
    ],
    "2025-07-28": [
      {
        "kind": "Feature",
        "content": "Global external Application Load Balancers now support the [JA4 fingerprint](https://github.com/FoxIO-LLC/ja4/blob/main/technical_details/JA4.md). The JA4 fingerprint can be added to a [custom request header](https://cloud.google.com/load-balancing/docs/https/custom-headers-global?variables#variables) using the `tls_ja4_fingerprint` variable.\n\nThis capability is now in **General Availability**.",
        "summary": {
          "title": "JA4 Fingerprint Support",
          "summary": "JA4 fingerprint support for global external Application Load Balancers."
        }
      }
    ],
    "2025-07-09": [
      {
        "kind": "Feature",
        "content": "Application Load Balancers and Proxy Network Load Balancers now support TLS certificates with large key sizes. Previously, these load balancers supported only certificates with RSA-2048 or ECDSA P-256 key types. With this update, you can now use self-managed certificates with RSA-3072, RSA-4096, and ECDSA P-384 keys.\n\n**Key details**:\n\n* Supported key types (for self-managed certificates): RSA-2048, RSA-3072, RSA-4096, ECDSA P-256, and ECDSA P-384\n* Load balancing coverage for self managed certificates:\n\n  + Certificate Manager SSL certificates: Global and regional load balancing\n  + Compute Engine SSL Certificates: Regional load balancing\n* Pricing: An additional charge of $0.45 per 1 million connections applies with certificates that use RSA-3072 and RSA-4096 key types. There are no per-connection charges for certificates that use RSA-2048, ECDSA P-256, or ECDSA P-384 key types.\n\nFor more information, see the documentation for [Supported key types](https://cloud.google.com/load-balancing/docs/ssl-certificates#key-types).\n\nThis capability is now in **General Availability**.",
        "summary": {
          "title": "TLS Certificates with Larger Key Sizes Now Supported",
          "summary": "Application Load Balancers and Proxy Network Load Balancers now support self-managed TLS certificates with larger key sizes, including RSA-3072, RSA-4096, and ECDSA P-384. This update expands the previously supported RSA-2048 and ECDSA P-256 key types. Note that certificates using RSA-3072 and RSA-4096 keys incur an additional charge of $0.45 per 1 million connections."
        }
      }
    ],
    "2025-07-08": [
      {
        "kind": "Feature",
        "content": "Zonal affinity, configured on the backend service of an internal passthrough Network Load Balancer, lets you limit cross-zone traffic, reduce latency, and improve performance, all while maintaining the benefits of a multi-zonal architecture.\n\nInternal passthrough Network Load Balancers support three zonal affinity options that offer varying degrees of preference for routing new connections to eligible backends that are in the same zone as a supported client.\n\nFor more information, see [Zonal affinity for internal passthrough Network Load Balancers](https://cloud.google.com/load-balancing/docs/internal/zonal-affinity).\n\nThis feature is in **Preview**.",
        "summary": {
          "title": "Zonal Affinity for Internal Load Balancers",
          "summary": "This feature allows internal passthrough Network Load Balancers to limit cross-zone traffic, reduce latency, and improve performance by configuring zonal affinity on the backend service. It supports three options for routing new connections to backends in the same zone as the client. This feature is currently in Preview."
        }
      }
    ],
    "2025-06-26": [
      {
        "kind": "Feature",
        "content": "In typical HTTPS communication, neither the load balancer nor the backend verify each other's identity, assuming that they are within a secure perimeter and can be trusted. However, when perimeter security needs reinforcement or communication extends beyond the perimeter, backend mTLS becomes essential. Backend mTLS ensures secure communication by requiring both the load balancer and the backend to mutually verify their identities.\n\nWith *backend authenticated TLS*, the load balancer verifies the backend server's certificate by checking its chain of trust, thereby confirming the backend's identity. Conversely, with *backend mTLS*, the backend server verifies the client certificate presented by the load balancer. Together, these mechanisms enable backend mTLS, ensuring that both parties validate each other's identity.\n\nBackend mTLS complements frontend mTLS, which is already generally available (GA).\n\nFor details, see the following:\n\n* [Backend mTLS overview](https://cloud.google.com/load-balancing/docs/backend-authenticated-tls-backend-mtls)\n* [Set up backend authenticated TLS](https://cloud.google.com/load-balancing/docs/backend-authenticated-tls-setup)\n* [Set up backend mTLS](https://cloud.google.com/load-balancing/docs/backend-mtls-setup)\n\nThis capability is in **General Availability** for global external Application Load Balancers.",
        "summary": {
          "title": "Backend mTLS for Enhanced Security",
          "summary": "This feature enables secure communication between your load balancer and backend services by ensuring mutual identity verification, complementing existing frontend mTLS. It's now generally available for global external Application Load Balancers."
        }
      }
    ],
    "2025-06-13": [
      {
        "kind": "Feature",
        "content": "Cloud Load Balancing supports load balancing to multi-NIC instances that use [Dynamic NICs](https://cloud.google.com/vpc/docs/multiple-interfaces-concepts).\n\nThis capability is in **Preview**.",
        "summary": {
          "title": "Load Balancing to Multi-NIC Instances",
          "summary": "Cloud Load Balancing now supports load balancing to instances with multiple network interfaces, including those using Dynamic NICs. This feature is currently in Preview."
        }
      }
    ],
    "2025-06-03": [
      {
        "kind": "Feature",
        "content": "Application Load Balancers now support the use of *custom metrics* that let you configure your load balancer's traffic distribution behavior to be based on metrics specific to your application or infrastructure requirements, rather than Google Cloud's standard utilization or rate-based metrics. Defining custom metrics for your load balancer gives you the flexibility to route application requests to the backend instances and endpoints that are most optimal for your workload.\n\nFor more information, see [Custom metrics for Application Load Balancers](https://cloud.google.com/load-balancing/docs/https/applb-custom-metrics).\n\nThis capability is in **General availability**.",
        "summary": {
          "title": "Application Load Balancers support custom metrics",
          "summary": "You can now use custom metrics to configure Application Load Balancer traffic distribution based on your specific application or infrastructure needs. This allows for more flexible routing to optimal backend instances and endpoints."
        }
      },
      {
        "kind": "Feature",
        "content": "Cleartext HTTP/2 over TCP, also known as H2C, lets you use HTTP/2 without TLS. H2C is supported by internal and external Application Load Balancers for both of the following connections:\n\n* Connections between clients and the load balancer. No special configuration is required. Support for this capability is already in **General Availability**.\n* Connections between the load balancer and its backends. Support for this capability is now in **General Availability**.\n\n  To configure H2C for connections between the load balancer and its backends, you set the backend service protocol to `H2C`.",
        "summary": {
          "title": "H2C Support Now Generally Available",
          "summary": "Cleartext HTTP/2 over TCP (H2C) is now generally available for both client-load balancer and load balancer-backend connections. You can enable H2C for backend connections by setting the backend service protocol to H2C."
        }
      }
    ]
  }
}